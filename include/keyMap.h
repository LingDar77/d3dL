#ifndef C413D7D9_415E_462F_B475_AAEB4E63F2A9
#define C413D7D9_415E_462F_B475_AAEB4E63F2A9
#include <map>
#include <string>
typedef std::bitset<254> keyType; //all keys provided only have 254 kinds, every set express its state
typedef std::map<const std::string, keyType> keys;

class keyMap
{
    const keyType keyW{"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"};
    const keyType keyS{"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000"};
    const keyType keyA{"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000"};
    const keyType keyD{"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000"};
    keys data;

public:
    keyMap() : data({{"W", keyW}, {"A", keyA}, {"S", keyS}, {"D", keyD}})
    {
    }
    keyMap(std::initializer_list<keys> il) {}
    keyType getKey(std::string s){
        auto buf=data.find(s);
        if(buf==data.end())   
            throw std::runtime_error("do not find keyType!");
        return buf->second;
    }
};
#endif /* C413D7D9_415E_462F_B475_AAEB4E63F2A9 */
